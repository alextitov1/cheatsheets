## Debug
```sh
oc debug --to-namespace="default" -- curl -s http://10.8.0.138:8080
```


## Create groups and assign users to groups.

```sh
oc adm groups new workshop-support

oc adm groups add-users workshop-support do280-support

oc get groups
```

# Use role-based access control (RBAC) to grant permissions to groups.

```sh
oc adm policy add-cluster-role-to-group admin workshop-support

```

# Restrict access to the self-provisioners cluster role.

```sh
oc edit clusterrolebinding self-provisioners
```


## Create a project template that sets quotas, ranges, and network policies.

### Quota

```yaml
apiVersion: v1
kind: ResourceQuota
metadata:
 name: workshop
 namespace: template-test
spec:
  hard:
    limits.cpu: 2
    limits.memory: 1Gi
    requests.cpu: 1500m
    requests.memory: 750Mi
```

### LimitRange

```yaml
apiVersion: v1
kind: LimitRange
metadata:
 name: workshop
 namespace: template-test
spec:
 limits:
   - max:
       cpu: 750m
       memory: 750Mi
     default:
       cpu: 500m
       memory: 500Mi
     defaultRequest:
       cpu: 100m
       memory: 250Mi
     type: Container
```

### NetworkPolicy
```sh
oc label ns template-test workshop=template-test
```

```yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: workshop
  namespace: template-test
spec:
  podSelector: {}
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            workshop: template-test
      - namespaceSelector:
          matchLabels:
            network.openshift.io/policy-group: ingress
```

### Project Template

```sh
oc adm create-bootstrap-project-template -o yaml > project-template.yaml

oc get resourcequota/workshop limitrange/workshop networkpolicy/workshop -o yaml >> project-template.yaml

oc create -f project-template.yaml -n openshift-config

oc edit projects.config.openshift.io cluster

```
```yaml
# project.config

apiVersion: config.openshift.io/v1
kind: Project
metadata:
...output omitted...
  name: cluster
...output omitted...
spec:
  projectRequestTemplate:
    name: project-request
```

```yaml
# project-template.yaml

apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: project-request
objects:
- apiVersion: project.openshift.io/v1
  kind: Project
  metadata:
    annotations:
      openshift.io/description: ${PROJECT_DESCRIPTION}
      openshift.io/display-name: ${PROJECT_DISPLAYNAME}
      openshift.io/requester: ${PROJECT_REQUESTING_USER}
    name: ${PROJECT_NAME}
    labels:
      workshop: ${PROJECT_NAME}
  spec: {}
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    name: workshop
    namespace: ${PROJECT_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: admin
  subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: ${PROJECT_ADMIN_USER}
- apiVersion: v1
  kind: ResourceQuota
  metadata:
    annotations:
    name: workshop
    namespace: ${PROJECT_NAME}
  spec:
    hard:
      limits.cpu: "2"
      limits.memory: 1Gi
      requests.cpu: 1500m
      requests.memory: 750Mi
- apiVersion: v1
  kind: LimitRange
  metadata:
    annotations:
    name: workshop
    namespace: ${PROJECT_NAME}
  spec:
    limits:
    - default:
        cpu: 500m
        memory: 500Mi
      defaultRequest:
        cpu: 100m
        memory: 250Mi
      max:
        cpu: 750m
        memory: 750Mi
      type: Container
- apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    annotations:
    name: workshop
    namespace: ${PROJECT_NAME}
  spec:
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            workshop: ${PROJECT_NAME}
      - namespaceSelector:
          matchLabels:
            network.openshift.io/policy-group: ingress
    podSelector: {}
    policyTypes:
    - Ingress`
parameters:
- name: PROJECT_NAME
- name: PROJECT_DISPLAYNAME
- name: PROJECT_DESCRIPTION
- name: PROJECT_ADMIN_USER
- name: PROJECT_REQUESTING_USER
```
